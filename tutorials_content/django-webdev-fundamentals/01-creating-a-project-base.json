[
  {
    "question-id": "foundational-django-purpose",
    "question": "What is the primary role of a web framework like Django in a project?",
    "answer_a": "To provide a structured and efficient way to build web applications by solving common problems.",
    "answer_b": "To design the visual layout and color scheme of a website using CSS.",
    "answer_c": "To host the final website on the internet for users to access.",
    "answer_d": "To manage and track changes to the code, similar to Git.",
    "correct_answer": "a",
    "difficulty": "foundational",
    "tags": ["django", "web-development"],
    "title-id": "creating-a-project-base"
  },
  {
    "question-id": "foundational-virtual-environment-role",
    "question": "What is the main reason for creating and activating a virtual environment before installing project dependencies like Django?",
    "answer_a": "It increases the website's performance and loading speed.",
    "answer_b": "It isolates the project's dependencies from other projects on the same computer, preventing version conflicts.",
    "answer_c": "It is a required security measure to get a license for Python.",
    "answer_d": "It automatically writes the basic HTML boilerplate for the project.",
    "correct_answer": "b",
    "difficulty": "foundational",
    "tags": ["python", "venv"],
    "title-id": "creating-a-project-base"
  },
  {
    "question-id": "foundational-project-vs-app",
    "question": "In the context of Django, what is the typical relationship between a 'project' and an 'app'?",
    "answer_a": "They are identical; 'project' and 'app' are interchangeable terms.",
    "answer_b": "A project is a single file, while an app is a collection of many projects.",
    "answer_c": "A project is the entire web application, which can be composed of one or more smaller, self-contained apps.",
    "answer_d": "An app controls the server, and a project handles the database.",
    "correct_answer": "c",
    "difficulty": "foundational",
    "tags": ["django"],
    "title-id": "creating-a-project-base"
  },
  {
    "question-id": "easy-start-django-project-command",
    "question": "Which command is used to create a new Django project in the current directory?",
    "answer_a": "python manage.py startapp _core .",
    "answer_b": "django-admin startproject _core .",
    "answer_c": "python -m venv venv",
    "answer_d": "python manage.py runserver",
    "correct_answer": "b",
    "difficulty": "easy",
    "tags": ["django", "cli"],
    "title-id": "creating-a-project-base"
  },
  {
    "question-id": "easy-manage-py-purpose",
    "question": "Which file acts as the primary command-line utility for a Django project, used for tasks like creating apps and running the server?",
    "answer_a": "settings.py",
    "answer_b": "urls.py",
    "answer_c": "manage.py",
    "answer_d": "views.py",
    "correct_answer": "c",
    "difficulty": "easy",
    "tags": ["django"],
    "title-id": "creating-a-project-base"
  },
  {
    "question-id": "easy-installed-apps-setting",
    "question": "After creating a new app, where must you register it so that the Django project becomes aware of its existence?",
    "answer_a": "In the `urlpatterns` list within `_core/urls.py`.",
    "answer_b": "In the `A_base/templates/A_base/base.html` file.",
    "answer_c": "In the `INSTALLED_APPS` list within `_core/settings.py`.",
    "answer_d": "In a new file called `admin.py`.",
    "correct_answer": "c",
    "difficulty": "easy",
    "tags": ["django", "settings"],
    "title-id": "creating-a-project-base"
  },
  {
    "question-id": "medium-django-view-function",
    "question": "In a Django view function, what is the purpose of the 'context' dictionary?",
    "answer_a": "It defines the URL patterns for the application.",
    "answer_b": "It holds security information and secret keys for the project.",
    "answer_c": "It contains the HTML structure that will be displayed to the user.",
    "answer_d": "It passes data from your Python code to the HTML template for rendering.",
    "correct_answer": "d",
    "difficulty": "medium",
    "tags": ["django", "views", "templates"],
    "title-id": "creating-a-project-base"
  },
  {
    "question-id": "medium-template-folder-structure",
    "question": "What is the primary reason for creating a namespaced template directory structure like `A_base/templates/A_base/`?",
    "answer_a": "It is the only folder name that Django is able to find automatically.",
    "answer_b": "To prevent template naming conflicts if another app has a file with the same name (e.g., `base.html`).",
    "answer_c": "It improves the website's loading speed by compressing the templates.",
    "answer_d": "It automatically connects the templates to the `models.py` file.",
    "correct_answer": "b",
    "difficulty": "medium",
    "tags": ["django", "templates", "best-practices"],
    "title-id": "creating-a-project-base"
  },
  {
    "question-id": "medium-core-urls-include",
    "question": "In `_core/urls.py`, what is the function of `include('A_base.urls')`?",
    "answer_a": "It directly renders the HTML from the `A_base` app.",
    "answer_b": "It imports all the view functions from the `A_base` app into the core `urls.py` file.",
    "answer_c": "It registers the app in `INSTALLED_APPS`.",
    "answer_d": "It delegates URL routing to the `urls.py` file within the `A_base` app for any matching URL patterns.",
    "correct_answer": "d",
    "difficulty": "medium",
    "tags": ["django", "routing", "urls"],
    "title-id": "creating-a-project-base"
  },
  {
    "question-id": "hard-django-request-cycle-order",
    "question": "Based on the described request-response cycle, which sequence correctly orders the core components Django uses to process a user's request?",
    "answer_a": "View Logic -> Template Rendering -> URL Resolving -> Model Interaction",
    "answer_b": "URL Resolving -> View Logic -> Model Interaction -> Template Rendering",
    "answer_c": "Model Interaction -> View Logic -> URL Resolving -> Template Rendering",
    "answer_d": "URL Resolving -> Template Rendering -> View Logic -> Model Interaction",
    "correct_answer": "b",
    "difficulty": "hard",
    "tags": ["django", "web-development", "architecture"],
    "title-id": "creating-a-project-base"
  },
  {
    "question-id": "hard-template-block-content-purpose",
    "question": "The tutorial uses `{% block content %}` in `base.html`. What is the fundamental purpose of this template tag in Django's inheritance system?",
    "answer_a": "To include another template file at that exact location, similar to a copy-paste action.",
    "answer_b": "To define a placeholder section that child templates can override with their own specific content.",
    "answer_c": "To create a variable named 'content' that can be used in the view's context dictionary.",
    "answer_d": "To mark a section of HTML that should only be rendered if the user is logged in.",
    "correct_answer": "b",
    "difficulty": "hard",
    "tags": ["django", "templates", "html"],
    "title-id": "creating-a-project-base"
  },
  {
    "question-id": "hard-render-function-request-object",
    "question": "The `render()` function is called with `(request, template, context)`. Why is the `request` object itself a required argument for this function?",
    "answer_a": "To give the template direct access to the database models.",
    "answer_b": "It allows Django's template context processors to add information (like user data) to the context automatically, making it available globally in templates.",
    "answer_c": "It is only used to determine the correct URL to send back in the HTTP response.",
    "answer_d": "The request object is used exclusively for running the `python manage.py runserver` command.",
    "correct_answer": "b",
    "difficulty": "hard",
    "tags": ["django", "views", "templates", "architecture"],
    "title-id": "creating-a-project-base"
  },
  {
    "question-id": "impossible-django-loose-coupling-implication",
    "question": "Django's components are 'loosely coupled'. What is a practical, advanced implication of this design philosophy not explicitly mentioned?",
    "answer_a": "It means the `views.py` and `models.py` files must always be in the same directory.",
    "answer_b": "It implies you could, with configuration changes, swap the entire template system for another (like Jinja2) without having to rewrite your view logic.",
    "answer_c": "It forces each app to have its own separate database.",
    "answer_d": "It ensures that a change in a URL in `urls.py` automatically renames the corresponding view function.",
    "correct_answer": "b",
    "difficulty": "impossible",
    "tags": ["django", "architecture", "design-patterns"],
    "title-id": "creating-a-project-base"
  },
  {
    "question-id": "impossible-startproject-command-destination",
    "question": "The command `django-admin startproject _core .` creates the project in the current directory. What would be the structural difference if the command were run without the final `.` destination argument?",
    "answer_a": "The command would fail with an error because the destination is always required.",
    "answer_b": "It would create a new outer directory named `_core`, and place both the inner `_core` project folder and `manage.py` inside it.",
    "answer_c": "It would place the `manage.py` file in the user's home directory and the `_core` project folder in the current directory.",
    "answer_d": "It would create the project correctly but would not generate a `manage.py` file.",
    "correct_answer": "b",
    "difficulty": "impossible",
    "tags": ["django", "cli", "project-structure"],
    "title-id": "creating-a-project-base"
  },
  {
    "question-id": "impossible-template-discovery-mechanism",
    "question": "The tutorial explains that Django finds templates inside app folders. What underlying setting in `settings.py` (which is `True` by default and not shown in the tutorial) enables this specific app-directory template discovery mechanism?",
    "answer_a": "`STATIC_FILES_FINDERS` being set to find app directories.",
    "answer_b": "The `DEBUG` setting being set to `True`.",
    "answer_c": "The `APP_DIRS` key within the `TEMPLATES` configuration dictionary being set to `True`.",
    "answer_d": "`USE_I18N` being set to `True` in the `settings.py` file.",
    "correct_answer": "c",
    "difficulty": "impossible",
    "tags": ["django", "templates", "settings", "architecture"],
    "title-id": "creating-a-project-base"
  }
]
