[
  {
    "question-id": "foundational-algorithm-definition",
    "question": "What is the definition of an 'algorithm'?",
    "answer_a": "An informal language similar to English used to plan a program.",
    "answer_b": "A procedure for solving a problem in terms of the actions to execute and the order of execution.",
    "answer_c": "A C statement that allows a program to repeat an action as long as a condition is true.",
    "answer_d": "The process of statements in a program executing one after another in the order they are written.",
    "correct_answer": "b",
    "difficulty": "foundational",
    "tags": ["structured-programming", "algorithms", "c-programming"],
    "title-id": "03-structured-program-development"
  },
  {
    "question-id": "foundational-pseudocode-purpose",
    "question": "What is the primary purpose of using pseudocode in program development?",
    "answer_a": "To directly compile and run on a computer without changes.",
    "answer_b": "To provide a formal, strict syntax for defining variables and functions.",
    "answer_c": "To help developers think out an algorithm using an informal, English-like language before writing actual code.",
    "answer_d": "To automatically detect and fix logic errors in a program.",
    "correct_answer": "c",
    "difficulty": "foundational",
    "tags": ["structured-programming", "pseudocode", "algorithms"],
    "title-id": "03-structured-program-development"
  },
  {
    "question-id": "foundational-sequential-execution",
    "question": "What is 'sequential execution'?",
    "answer_a": "When a program chooses between alternative courses of action based on a condition.",
    "answer_b": "When a program repeats a set of statements as long as a condition remains true.",
    "answer_c": "When a program transfers control to a different function.",
    "answer_d": "When statements in a program execute one after the other in the order they are written.",
    "correct_answer": "d",
    "difficulty": "foundational",
    "tags": ["structured-programming", "control-structures", "c-programming"],
    "title-id": "03-structured-program-development"
  },
  {
    "question-id": "easy-iteration-statement-keyword",
    "question": "Which C keyword is introduced in this chapter for creating an iteration statement, also known as a loop?",
    "answer_a": "if",
    "answer_b": "return",
    "answer_c": "main",
    "answer_d": "while",
    "correct_answer": "d",
    "difficulty": "easy",
    "tags": ["c-programming", "control-structures", "while-loop", "iteration"],
    "title-id": "03-structured-program-development"
  },
  {
    "question-id": "easy-sentinel-value-definition",
    "question": "In the context of sentinel-controlled iteration, what is a 'sentinel value'?",
    "answer_a": "A variable used to count the number of loop iterations.",
    "answer_b": "The final calculated average of all grades entered.",
    "answer_c": "A special value entered by the user to indicate the end of data entry.",
    "answer_d": "The first grade entered by the user.",
    "correct_answer": "c",
    "difficulty": "easy",
    "tags": ["c-programming", "iteration", "while-loop", "control-structures"],
    "title-id": "03-structured-program-development"
  },
  {
    "question-id": "easy-counter-variable-purpose",
    "question": "In counter-controlled iteration, what is the main purpose of a 'counter' variable?",
    "answer_a": "To store the sum of all the values entered.",
    "answer_b": "To specify the number of times a set of statements should execute.",
    "answer_c": "To hold the most recent value entered by the user.",
    "answer_d": "To terminate the loop when a negative number is entered.",
    "correct_answer": "b",
    "difficulty": "easy",
    "tags": ["c-programming", "iteration", "while-loop", "algorithms"],
    "title-id": "03-structured-program-development"
  },
  {
    "question-id": "medium-counter-vs-sentinel-iteration",
    "question": "What is the key difference between counter-controlled iteration and sentinel-controlled iteration?",
    "answer_a": "Counter-controlled loops are for addition, while sentinel-controlled loops are for averaging.",
    "answer_b": "Counter-controlled iteration repeats a known number of times (definite), while sentinel-controlled iteration repeats an unknown number of times (indefinite).",
    "answer_c": "Counter-controlled loops use `if` statements, while sentinel-controlled loops use `while` statements.",
    "answer_d": "Counter-controlled iteration uses integer variables, while sentinel-controlled iteration uses floating-point variables.",
    "correct_answer": "b",
    "difficulty": "medium",
    "tags": [
      "structured-programming",
      "iteration",
      "control-structures",
      "algorithms"
    ],
    "title-id": "03-structured-program-development"
  },
  {
    "question-id": "medium-cast-operator-purpose",
    "question": "In the statement `double average = (double) total / counter;`, why is the `(double)` cast operator necessary?",
    "answer_a": "To permanently change the type of the `total` variable to `double` for the rest of the program.",
    "answer_b": "To round the result of the division to the nearest whole number.",
    "answer_c": "To create a temporary floating-point copy of `total` to prevent integer division, which would truncate the fractional part of the average.",
    "answer_d": "To signal to the compiler that the calculation might result in an arithmetic overflow.",
    "correct_answer": "c",
    "difficulty": "medium",
    "tags": ["c-programming", "operators", "variables"],
    "title-id": "03-structured-program-development"
  },
  {
    "question-id": "medium-printf-precision-formatting",
    "question": "What is the effect of using the conversion specification `%.2f` in a `printf` statement?",
    "answer_a": "It prints a floating-point number with a default precision of 2 digits.",
    "answer_b": "It prints a floating-point number, rounding it to two digits to the right of the decimal point.",
    "answer_c": "It prints the floating-point number twice.",
    "answer_d": "It ensures the number takes up at least two character spaces when printed.",
    "correct_answer": "b",
    "difficulty": "medium",
    "tags": ["c-programming", "stdio"],
    "title-id": "03-structured-program-development"
  },
  {
    "question-id": "hard-top-down-refinement-process",
    "question": "The tutorial describes top-down, stepwise refinement. What is the essential process involved in this technique?",
    "answer_a": "Writing the C code first, then creating pseudocode to match it for documentation.",
    "answer_b": "Starting with a single, high-level statement of the program's function (the 'top') and progressively breaking it down into smaller, more detailed tasks.",
    "answer_c": "Building the program from the smallest components (like variable declarations) and combining them into a final solution.",
    "answer_d": "Choosing between counter-controlled and sentinel-controlled iteration as the first and most important step.",
    "correct_answer": "b",
    "difficulty": "hard",
    "tags": ["structured-programming", "algorithms", "top-down-design"],
    "title-id": "03-structured-program-development"
  },
  {
    "question-id": "hard-infinite-loop-cause",
    "question": "An infinite loop is described as a logic error. In a `while` loop, what is the fundamental reason an infinite loop occurs?",
    "answer_a": "The loop's condition is initially false when the loop is first encountered.",
    "answer_b": "A variable is not initialized before the loop begins.",
    "answer_c": "The action or actions within the loop's body never cause the loop's continuation condition to become false.",
    "answer_d": "The loop contains more than one statement in its body.",
    "correct_answer": "c",
    "difficulty": "hard",
    "tags": ["c-programming", "control-structures", "while-loop", "debugging"],
    "title-id": "03-structured-program-development"
  },
  {
    "question-id": "hard-arithmetic-overflow",
    "question": "The 'Secure C Programming' section discusses arithmetic overflow. What is the potential consequence of this error?",
    "answer_a": "The program will automatically use a `double` to store the result, preventing data loss.",
    "answer_b": "The compiler will always detect the potential for overflow and report a syntax error.",
    "answer_c": "The value of a calculation exceeds the maximum value that can be stored in its variable type, causing undefined behavior.",
    "answer_d": "It causes the computer's hard drive to run out of space.",
    "correct_answer": "c",
    "difficulty": "hard",
    "tags": ["c-programming", "security", "variables", "operators"],
    "title-id": "03-structured-program-development"
  },
  {
    "question-id": "impossible-implicit-conversion-rules",
    "question": "The text mentions implicit conversion in mixed-type expressions. What is the specific rule set, known as 'usual arithmetic conversions', that dictates which type is promoted when an `int` and a `long double` are in an expression?",
    "answer_a": "The `long double` is always converted to an `int` to prevent data loss.",
    "answer_b": "The `int` is promoted to a `long double` because it is the 'wider' of the two data types, and the calculation is performed using that type.",
    "answer_c": "Both types are converted to a standard `double` for the calculation.",
    "answer_d": "The compiler reports an error because `int` and `long double` cannot be mixed in one expression.",
    "correct_answer": "b",
    "difficulty": "impossible",
    "tags": ["c-programming", "operators", "variables", "compiler"],
    "title-id": "03-structured-program-development"
  },
  {
    "question-id": "impossible-rounding-behavior",
    "question": "The text states that printing a float with precision causes rounding (e.g., `3.446` becomes `3.45`). What is the default rounding mode typically used by the C standard for such operations?",
    "answer_a": "Always round up (ceiling).",
    "answer_b": "Always round down (floor).",
    "answer_c": "Round to the nearest integer, with halves rounded towards zero.",
    "answer_d": "Round to the nearest integer, with halves rounded to the nearest even number ('round half to even').",
    "correct_answer": "d",
    "difficulty": "impossible",
    "tags": ["c-programming", "stdio", "operators"],
    "title-id": "03-structured-program-development"
  },
  {
    "question-id": "impossible-algorithm-complexity-analysis",
    "question": "While the text defines an algorithm, it does not cover its efficiency analysis. What notation is standardly used in computer science to describe the time complexity (how runtime scales with input size) of an algorithm like the class-average examples?",
    "answer_a": "Newton Notation.",
    "answer_b": "Pascal Case.",
    "answer_c": "Big O Notation (e.g., O(n)).",
    "answer_d": "Standard Deviation.",
    "correct_answer": "c",
    "difficulty": "impossible",
    "tags": ["algorithms", "structured-programming", "computer-science"],
    "title-id": "03-structured-program-development"
  }
]
